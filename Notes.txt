----TODO----
1. Controllers
2. Routes 
3. Testing
4. Find a way to handle images
    4a. Could use formidable and form data to pass images.
    4b. Could have static profile images on the front that the user can choose from
        - this would mean the photo path would be a string to the file path rather than allowing custom images


----COMPLETED----
1. Packages Installed
2. Git Repository 
3. Index.js Setup
4. File Structure 
5. Models Completed
6. Create MongoDB data base and connect 



----Thoughts----
. The way Admin should work is if they are owner of the team they will have full admin privileges within that team.
. Super Admin will be able to CRUD everything 
. Admin should probably be removed from the user and put on the team instead of permissions 
. If this is done their should be an Admin / Super Admin here.  Super Admin is creator of team and can full CRUD over team/projects/issues. Admin will have same 
    privileges but wont be able to remove Super Admin
. Follow the permissions idea 
. How to cascade based on a delete.

. Figure out a way for those that are permitted to give access to others who need it while not being able to remove the creator of the project 
. Users who own a project are able to create and delete at will and it will add or remove the ProjectId accordingly 


. So the way that it works is that everything has to follow the flow of the application.  The first thing that is created is the user.  IF the user has permissions to create a team they can.  After the team is created the project is created.  Those that have permssions in the project may add issues.  Anyone on the team can add a note to the issue.  The only one who can close the issue is the creator of it.  